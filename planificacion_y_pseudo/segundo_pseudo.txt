

includes


main()
{

	validacion_cla();

	set_printer_t();
	set_comparator_t();
	set_destructor_t();

	ADT_Vector_new();

	set_config_Vector(kjhjhkj);
	{
		setear_destructor_element_del_Vector;

		setear_modo_comparator_del_Vector;

		setear_printer_del_Vector;
	}

	process_mp3( argv, un_vector , algo_mas )
	{

		CICLO(para cada argv) //Leemos todos los mp3 y los guardamos en un vector  (load_mp3)

		{

			abrir el archivo iesimo en modo binario 

			adt_track *pointer;

			crear el track iesimo (crea un dato tipo ADT_Track que está en memoria dinamica, y no esta inicializado)

			obtener el indice y guardarlo en el track_t recién creado (primitiva de track_adt)

			cargar el track en la posicion iesima del vector

		}
			...
		ADT_Vector_grow();
			...
	}//ACA YA TENEMOS EL VECTOR CON TODOS LOS INDICES MP3 CARGADOS PEERFECTOOO REY.

	ADT_Vector_sort( ADT_Vector ,  ) Ordenar los elementos del vector por (metodo de ordenamiento)
	{

	};


	ADT_Vector_export( ADT_Vector , format_t )Imprimir los elementos ordenados en (formato indicado)
	{
		ADT_Vector_export_as_CSV(ADT_Vector);
		ADT_Vector_export_as_XLM(ADT_Vector);
	}
	
	
	return EXIT_SUCCESS;

}